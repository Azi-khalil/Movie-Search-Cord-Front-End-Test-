{"ast":null,"code":"var _jsxFileName = \"/Users/Admin/Downloads/frontend-test/src/pages/discover/index.js\";\nimport React from \"react\";\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport * as colors from \"../../colors\";\nimport * as fetcher from \"../../fetcher\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Discover extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.searchMovies = async (keyword, year) => {\n      this.setState({\n        keyword: keyword,\n        year: year\n      });\n      console.log(this.state.results); // await axios\n      //   .get(`https://api.themoviedb.org/3/search/movie?api_key=885b085ddf759af703d71ca6be89d58b&language=en-US&query=${this.state.keyword}&page=1&include_adult=false`)\n      //   .then(function(response) {\n      //     this.setState({\n      //       results: response.results,\n      //     })\n      //   })\n    };\n\n    this.handleKeyword = e => {\n      this.setState({\n        keyword: e.target.value\n      });\n    };\n\n    this.handleYear = e => {\n      this.setState({\n        year: e.target.value\n      });\n      console.log(this.state.year);\n    };\n\n    this.state = {\n      keyword: '',\n      year: 0,\n      results: [],\n      totalCount: 0,\n      genreOptions: [],\n      ratingOptions: [],\n      languageOptions: []\n    };\n  } // api =  885b085ddf759af703d71ca6be89d58b\n\n\n  componentDidMount() {\n    fetch(\"https://api.themoviedb.org/3/movie/popular?api_key=885b085ddf759af703d71ca6be89d58b&language=en-US&page=1\").then(response => response.json()).then(response => {\n      console.log(response);\n      this.setState({\n        results: response.results,\n        genreOptions: response.results.genre_ids,\n        totalCount: response.total_results,\n        ratingOptions: response.results.vote_average\n      });\n    });\n  }\n\n  // Write a function to preload the popular movies when page loads & get the movie genres\n  // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\n  render() {\n    const {\n      genreOptions,\n      languageOptions,\n      ratingOptions,\n      totalCount,\n      results\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(DiscoverWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MobilePageTitle, {\n        children: \"Discover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(MovieFilters, {\n        children: /*#__PURE__*/_jsxDEV(SearchFilters, {\n          genres: genreOptions,\n          ratings: ratingOptions,\n          languages: languageOptions,\n          searchMovies: (keyword, year) => this.searchMovies(keyword, year),\n          handleKeyword: this.handleKeyword,\n          handleYear: this.handleYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieResults, {\n        children: [totalCount > 0 && /*#__PURE__*/_jsxDEV(TotalCounter, {\n          children: [totalCount, \" results\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: results || [],\n          genres: genreOptions || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nconst DiscoverWrapper = styled.main`\n  padding: 60px 35px;\n`;\n_c = DiscoverWrapper;\nconst TotalCounter = styled.div`\n  font-weight: 900;\n`;\n_c2 = TotalCounter;\nconst MovieResults = styled.div`\n\n`;\n_c3 = MovieResults;\nconst MovieFilters = styled.div`\n\n`;\n_c4 = MovieFilters;\nconst MobilePageTitle = styled.header`\n\n`;\n_c5 = MobilePageTitle;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"DiscoverWrapper\");\n$RefreshReg$(_c2, \"TotalCounter\");\n$RefreshReg$(_c3, \"MovieResults\");\n$RefreshReg$(_c4, \"MovieFilters\");\n$RefreshReg$(_c5, \"MobilePageTitle\");","map":{"version":3,"sources":["/Users/Admin/Downloads/frontend-test/src/pages/discover/index.js"],"names":["React","styled","axios","colors","fetcher","SearchFilters","MovieList","Discover","Component","constructor","props","searchMovies","keyword","year","setState","console","log","state","results","handleKeyword","e","target","value","handleYear","totalCount","genreOptions","ratingOptions","languageOptions","componentDidMount","fetch","then","response","json","genre_ids","total_results","vote_average","render","DiscoverWrapper","main","TotalCounter","div","MovieResults","MovieFilters","MobilePageTitle","header"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios'\r\n\r\n\r\nimport * as colors from \"../../colors\";\r\nimport * as fetcher from \"../../fetcher\";\r\n\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\n\r\nexport default class Discover extends React.Component {\r\n \r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      keyword: '',\r\n      year: 0,\r\n      results: [],\r\n      totalCount: 0,\r\n      genreOptions: [],\r\n      ratingOptions: [],\r\n      languageOptions: [], \r\n    };\r\n  }\r\n  // api =  885b085ddf759af703d71ca6be89d58b\r\n  componentDidMount() {\r\n    fetch(\"https://api.themoviedb.org/3/movie/popular?api_key=885b085ddf759af703d71ca6be89d58b&language=en-US&page=1\")\r\n    .then((response) => response.json())\r\n    .then(response => {\r\n      console.log(response)\r\n        this.setState({\r\n          results: response.results,\r\n          genreOptions: response.results.genre_ids,\r\n          totalCount:response.total_results,\r\n          ratingOptions: response.results.vote_average\r\n        })\r\n    });\r\n  }\r\n\r\n\r\n  searchMovies = async (keyword, year) => {\r\n    this.setState({\r\n      keyword: keyword,\r\n      year: year\r\n    })\r\n    console.log(this.state.results)\r\n\r\n    // await axios\r\n    //   .get(`https://api.themoviedb.org/3/search/movie?api_key=885b085ddf759af703d71ca6be89d58b&language=en-US&query=${this.state.keyword}&page=1&include_adult=false`)\r\n    //   .then(function(response) {\r\n    //     this.setState({\r\n    //       results: response.results,\r\n    //     })\r\n    //   })\r\n  }\r\n\r\n  handleKeyword = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value\r\n    })\r\n  }\r\n  handleYear = (e) => {\r\n    this.setState({\r\n      year: e.target.value\r\n    })\r\n    console.log(this.state.year)\r\n  }\r\n  \r\n  // Write a function to preload the popular movies when page loads & get the movie genres\r\n\r\n  // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\r\n\r\n\r\n\r\n  render () {\r\n    const { genreOptions, languageOptions, ratingOptions, totalCount, results } = this.state;\r\n   \r\n  \r\n\r\n    return (\r\n      <DiscoverWrapper>\r\n        <MobilePageTitle>Discover</MobilePageTitle> {/* MobilePageTitle should become visible on small screens & mobile devices*/}\r\n        <MovieFilters>\r\n          <SearchFilters \r\n            genres={genreOptions} \r\n            ratings={ratingOptions}  \r\n            languages={languageOptions}\r\n            searchMovies={(keyword, year) => this.searchMovies(keyword, year)}\r\n            handleKeyword={this.handleKeyword}\r\n            handleYear={this.handleYear}\r\n          />\r\n        </MovieFilters>\r\n        <MovieResults>\r\n          { totalCount > 0 && <TotalCounter>{totalCount} results</TotalCounter>}\r\n          <MovieList \r\n            movies={results || []}\r\n            genres={genreOptions || []}\r\n          />\r\n        </MovieResults>\r\n      </DiscoverWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nconst DiscoverWrapper = styled.main`\r\n  padding: 60px 35px;\r\n`\r\n\r\nconst TotalCounter = styled.div`\r\n  font-weight: 900;\r\n`\r\n\r\nconst MovieResults = styled.div`\r\n\r\n`\r\n\r\nconst MovieFilters = styled.div`\r\n\r\n`\r\n\r\nconst MobilePageTitle = styled.header`\r\n\r\n`"]},"metadata":{},"sourceType":"module"}